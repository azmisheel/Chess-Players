@page "/players"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ChessMatch.Models
@using ChessMatch.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ChessMatch.Data.ChessMatchContext> DbFactory

<PageTitle>Index</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Players</h1>

    <form action="/players" method="get" class="row g-3 mb-4">
        <div class="col-md-3">
            <input type="search" name="NameFilter" value="@NameFilter" class="form-control" placeholder="Search by name" />
        </div>
        <div class="col-md-3">
            <select name="SelectedCountryId" class="form-select">
                <option value="">All Countries</option>
                @foreach (var country in Countries)
                {
                    <option value="@country.ID" selected="@(SelectedCountryId == country.ID ? "selected" : null)">
                        @country.Name
                    </option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <input type="number" name="MinRating" value="@MinRating" class="form-control" placeholder="Min Rating" />
        </div>
        <div class="col-md-2">
            <input type="number" name="MaxRating" value="@MaxRating" class="form-control" placeholder="Max Rating" />
        </div>
        <div class="col-md-auto">
            <button type="submit" class="btn btn-primary">Filter</button>
            <a href="/players" class="btn btn-outline-secondary ms-2">Clear</a>
        </div>
    </form>


    <div class="mb-3">
        <a href="players/create" class="btn btn-success">+ Create New Player</a>
    </div>

    <QuickGrid Class="table table-striped table-hover align-middle" Items="FilteredPlayers" Pagination="pagination">
        <PropertyColumn Property="player => player.Name" Title="Name" Sortable="true"/>
        <PropertyColumn Property="player => player.Rating" Title="Rating" />
        <PropertyColumn Property="player => player.Age" Title="Age" Sortable="true" />
        <PropertyColumn Property="player => player.Wins" Title="Wins" />
        <PropertyColumn Property="player => player.Losses" Title="Losses" />
        <PropertyColumn Property="player => player.Draws" Title="Draws" />
        <PropertyColumn Property="player => player.Country.Name" Title="Country" Sortable="true"/>

        <TemplateColumn Context="player">
            <a href="@($"players/edit?id={player.ID}")" class="btn btn-sm btn-outline-primary me-1">Edit</a>
            <a href="@($"players/details?id={player.ID}")" class="btn btn-sm btn-outline-secondary me-1">Details</a>
            <a href="@($"players/delete?id={player.ID}")" class="btn btn-sm btn-outline-danger">Delete</a>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
</div>



@code {

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private ChessMatchContext context = default!;
    private IQueryable<Player> players = default!;

    [SupplyParameterFromQuery]
    private string? NameFilter { get; set; }

    [SupplyParameterFromQuery]
    private int? MinRating { get; set; }

    [SupplyParameterFromQuery]
    private int? MaxRating { get; set; }

    [SupplyParameterFromQuery]
    private int? SelectedCountryId { get; set; }

    private List<Country> Countries = new();


    private IQueryable<Player> FilteredPlayers =>
    context.Players
        .Include(p => p.Country)
        .Where(p =>
            (string.IsNullOrEmpty(NameFilter) || p.Name.ToUpper().Contains(NameFilter.ToUpper())) &&
            (!MinRating.HasValue || p.Rating >= MinRating.Value) &&
            (!MaxRating.HasValue || p.Rating <= MaxRating.Value) &&
            (!SelectedCountryId.HasValue || p.CountryID == SelectedCountryId.Value)
        );

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        players = context.Players.Include(p => p.Country);
        Countries = context.Countries.OrderBy(c => c.Name).ToList();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
