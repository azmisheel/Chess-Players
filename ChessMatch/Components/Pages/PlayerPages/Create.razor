@page "/players/create"
@using Microsoft.EntityFrameworkCore
@using ChessMatch.Models
@inject IDbContextFactory<ChessMatch.Data.ChessMatchContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Player</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Create New Player</h1>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <div class="card shadow-sm">
        <div class="card-body">
            <EditForm method="post" Model="Player" OnValidSubmit="AddPlayer" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-2">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="Player.Name" class="form-control" />
                    <ValidationMessage For="() => Player.Name" class="text-danger" />
                </div>

                <div class="mb-2">
                    <label for="rating" class="form-label">Rating</label>
                    <InputNumber id="rating" @bind-Value="Player.Rating" class="form-control" />
                    <ValidationMessage For="() => Player.Rating" class="text-danger" />
                </div>

                <div class="mb-2">
                    <label for="age" class="form-label">Age</label>
                    <InputNumber id="age" @bind-Value="Player.Age" class="form-control" />
                    <ValidationMessage For="() => Player.Age" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="wins" class="form-label">Wins</label>
                    <InputNumber id="wins" @bind-Value="Player.Wins" class="form-control" />
                    <ValidationMessage For="() => Player.Wins" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="losses" class="form-label">Losses</label>
                    <InputNumber id="losses" @bind-Value="Player.Losses" class="form-control" />
                    <ValidationMessage For="() => Player.Losses" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="draws" class="form-label">Draws</label>
                    <InputNumber id="draws" @bind-Value="Player.Draws" class="form-control" />
                    <ValidationMessage For="() => Player.Draws" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="countryid" class="form-label">Country</label>
                    <select id="countryid" @bind="Player.CountryID" class="form-select">
                        <option value="">-- Select Country --</option>
                        @foreach (var country in Countries)
                        {
                            <option value="@country.ID">@country.Name</option>
                        }
                    </select>
                    <ValidationMessage For="() => Player.CountryID" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Create</button>
                <a href="/players" class="btn btn-outline-secondary ms-2">Back to List</a>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Player Player { get; set; } = new();
    private string? errorMessage;
    private List<Country> Countries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Countries = await context.Countries.ToListAsync();
    }

    private async Task AddPlayer()
    {
        using var context = DbFactory.CreateDbContext();
        try
        {
            context.Players.Add(Player);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/players");
        }
        catch (DbUpdateException)
        {
            errorMessage = "Unable to create! Cannot have duplicate Names.";
        }
    }
}
