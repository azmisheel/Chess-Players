@page "/countries"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ChessMatch.Models
@using ChessMatch.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ChessMatch.Data.ChessMatchContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Countries</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Countries</h1>


    <form action="/countries" method="get" class="row g-3 mb-4">
        <div class="col-md-3">
            <input type="search" name="NameFilter" value="@NameFilter" class="form-control" placeholder="Search by name" />
        </div>
        <div class="col-md-auto">
            <button type="submit" class="btn btn-primary">Filter</button>
            <a href="/countries" class="btn btn-outline-secondary ms-2">Clear</a>
        </div>
    </form>

    <p>
        <a href="countries/create" class="btn btn-success">+ Create New Country</a>
    </p>

    <QuickGrid Class="table table-striped table-hover align-middle" Items="FilteredCountries" Pagination="pagination">
        <PropertyColumn Property="country => country.Name" Title="Country Name" Sortable="true" />

        <TemplateColumn Context="country">
            <div class="d-flex justify-content-end">
                <a href="@($"countries/edit?id={country.ID}")" class="btn btn-sm btn-outline-primary me-1">Edit</a>
                <a href="@($"countries/details?id={country.ID}")" class="btn btn-sm btn-outline-secondary me-1">Details</a>
                <a href="@($"countries/delete?id={country.ID}")" class="btn btn-sm btn-outline-danger">Delete</a>
            </div>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination"/>
</div>

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    private ChessMatchContext context = default!;

    [SupplyParameterFromQuery]
    private string? NameFilter { get; set; }


    private IQueryable<Country> FilteredCountries =>
    context.Countries
    .Where(p =>
        (string.IsNullOrEmpty(NameFilter) || p.Name.ToUpper().Contains(NameFilter.ToUpper()))
    );


    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
