@page "/countries/delete"
@using Microsoft.EntityFrameworkCore
@using ChessMatch.Models
@inject IDbContextFactory<ChessMatch.Data.ChessMatchContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>

<div>
    <h2>Country</h2>
    <hr />
    @if (country is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@country.Name</dd>
        </dl>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        <EditForm method="post" Model="country" OnValidSubmit="DeleteCountry" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger me-2" disabled="@(country is null)">Delete</button>
            <a href="/countries" class="btn btn-outline-secondary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Country? country;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        country = await context.Countries.FirstOrDefaultAsync(m => m.ID == ID);

        if (country is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private string? errorMessage;

    private async Task DeleteCountry()
    {
        using var context = DbFactory.CreateDbContext();
        try
        {
            context.Countries.Remove(country!);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/countries");
        }
        catch (DbUpdateException)
        {
            errorMessage = "Unable to delete this country because it has players associated with it.";
        }
    }
}
